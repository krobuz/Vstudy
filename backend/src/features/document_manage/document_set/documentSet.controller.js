const BoHoso = require('./documentSet.model');
const HocSinh = require('../../../models/student.model');

// üìå L·∫•y t·∫•t c·∫£ c√°c h·ªì s∆°
exports.getAllBoHoso = async (req, res) => {
  try {
    const boHosos = await BoHoso.findAll({
      include: [{ model: HocSinh, as: 'hoc_sinh', attributes: ['ten_hs'] }],
      order: [['ngay_tao', 'DESC']],
    });
    res.json(boHosos);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
};

// üìå L·∫•y chi ti·∫øt h·ªì s∆° theo id
exports.getBoHosoById = async (req, res) => {
  try {
    const boHoso = await BoHoso.findByPk(req.params.id, {
      include: [{ model: HocSinh, as: 'hoc_sinh', attributes: ['ten_hs'] }],
    });

    if (!boHoso) return res.status(404).json({ message: "H·ªì s∆° kh√¥ng t·ªìn t·∫°i" });
    
    res.json(boHoso);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
};

// üìå Th√™m h·ªì s∆° m·ªõi
exports.createBoHoso = async (req, res) => {
  try {
    const { id_hocsinh, ten_bo_hoso, status } = req.body;

    // Ki·ªÉm tra xem h·ªçc sinh c√≥ t·ªìn t·∫°i kh√¥ng
    const hocSinh = await HocSinh.findByPk(id_hocsinh);
    if (!hocSinh) return res.status(404).json({ message: "H·ªçc sinh kh√¥ng t·ªìn t·∫°i" });

    const newBoHoso = await BoHoso.create({ id_hocsinh, ten_bo_hoso, status });
    res.status(201).json(newBoHoso);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
};

// üìå C·∫≠p nh·∫≠t h·ªì s∆°
exports.updateBoHoso = async (req, res) => {
  try {
    const boHoso = await BoHoso.findByPk(req.params.id);
    if (!boHoso) return res.status(404).json({ message: "H·ªì s∆° kh√¥ng t·ªìn t·∫°i" });

    await boHoso.update(req.body);
    res.json(boHoso);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
};

// üìå X√≥a h·ªì s∆°
exports.deleteBoHoso = async (req, res) => {
  try {
    const boHoso = await BoHoso.findByPk(req.params.id);
    if (!boHoso) return res.status(404).json({ message: "H·ªì s∆° kh√¥ng t·ªìn t·∫°i" });

    await boHoso.destroy();
    res.json({ message: "ƒê√£ x√≥a h·ªì s∆°" });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
};
